import { Op } from 'sequelize';
import { Keyboard } from 'vk-io';

class TopsSubcommand {
  name = '—Ç–æ–ø'
  arguments = {
    target: { name: '–∏–≥—Ä–æ–∫', type: 'user', optional: true },
    graph: { name: '–≥—Ä–∞—Ñ–∏–∫', type: 'word', optional: true }
  }

  async handler(ctx) {
    const { User } = ctx.getPlugin('common/users');
    const { Pet } = ctx.getPlugin('systems/pets');
    const { SeedsStat, getStat } = ctx.getPlugin('bot/gameSeeds');

    const target = ctx.params.target || ctx.user;

    const [pet, seedsStat] = await Promise.all([
      target.pets.get(),
      getStat(target.vkId)
    ]);

    const [
      balancePos,
      petPos,
      seedsPos,
      levelPos
    ] = await Promise.all([
      User.count({ where: { money: { [Op.gte]: target.money } } }),
      pet && Pet.count({ where: { rating: { [Op.gte]: pet.rating } } }),
      seedsStat && SeedsStat.count({ where: { count: { [Op.gte]: seedsStat } } }),
      User.count({
        where: {
          [Op.or]: [
            { level: { [Op.gt]: ctx.user.level } },
            { level: ctx.user.level, score: { [Op.gt]: ctx.user.score } }
          ]
        }
      })
    ]);

    const [
      usersCount,
      petsCount,
      seedsStatsCount
    ] = await Promise.all([
      User.count(),
      Pet.count(),
      SeedsStat.count()
    ]);

    const getBalls = (max, curr) => max - (curr || max);

    target.rating = [
      getBalls(usersCount, balancePos), // Balance
      getBalls(petsCount, petPos), // Pets
      getBalls(seedsStatsCount, seedsPos), // Seeds
      getBalls(usersCount, levelPos + 1) // Level
    ].reduce((acc, v) => acc + v);

    target.save();

    const jsonData = {
      type: 'radar',
      data: {
        labels: ['–ë–∞–ª–∞–Ω—Å', '–ü–∏—Ç–æ–º–µ—Ü', '–°–µ–º–µ—á–∫–∏', '–£—Ä–æ–≤–µ–Ω—å'],
        datasets: [
          {
            label: target.getFullName(),
            data: [
              getBalls(usersCount, balancePos) / usersCount,
              getBalls(petsCount, petPos) / petsCount,
              getBalls(seedsStatsCount, seedsPos) / seedsStatsCount,
              getBalls(usersCount, levelPos + 1) / usersCount
            ],
            backgroundColor: 'green'
          }
        ]
      }
    };

    ctx.builder()
      .photo(ctx.params.graph === '–≥—Ä–∞—Ñ–∏–∫' && `https://quickchart.io/chart?c=${encodeURIComponent(JSON.stringify(jsonData))}`)
      .lines([
        `üîº ${target}:\n`,
        `üí≥ ‚Ññ${balancePos} –ø–æ –±–∞–ª–∞–Ω—Å—É.`,
        `‚ö° ‚Ññ${levelPos + 1} –ø–æ —É—Ä–æ–≤–Ω—é.`,
        pet ? `üêæ ‚Ññ${petPos} –ø–æ –ø–∏—Ç–æ–º—Ü—É.` : '‚≠ï –ù–µ—Ç –≤ –ø–∏—Ç–æ–º—Ü–∞—Ö.',
        seedsStat ? `üåª ‚Ññ${seedsPos} –ø–æ —Å–µ–º–µ—á–∫–∞–º.` : '‚≠ï –ù–µ—Ç –≤ —Å–µ–º–µ—á–∫–∞—Ö.',
        `\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${target.rating} –µ–¥.`
      ])
      .answer();
  }
}

export default class ProfileCommand {
  name = '–ø—Ä–æ—Ñ–∏–ª—å'
  description = '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–µ'
  emoji = 'üë§'
  arguments = {
    target: { name: '–∏–≥—Ä–æ–∫', type: 'user', optional: true }
  }

  subcommands = [
    new TopsSubcommand()
  ];

  async handler(ctx) {
    const { briefNumber } = ctx.getPlugin('systems/moneys');

    const target = ctx.params.target || ctx.user;
    ctx.user.achievements.unlockIf('itsMe', target === ctx.user);

    const { list, Achievement } = ctx.getPlugin('systems/achievements');
    const unlockedCount = await Achievement.count({ where: { vkId: ctx.user.vkId } });
    const job = target.jobs.get();

    ctx.builder()
      .lines([
        `üëÄ ${target}:`,
        target.role !== 'user' && `üîë ${target.pex.get().title}.`,
        `üí≥ ${target.moneys.getLocaled()} –±–∏—Ç.`,
        job && `üíº ${job.name} [${briefNumber(job.salary)}].`,
        `üèÖ –ê—á–∏–≤–æ–∫: ${unlockedCount}/${list.length} —à—Ç.`,
        `‚ö° LVL: ${target.level} (${target.lvl.getProgress()}%).`,
        target.rating && `‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${target.rating} –µ–¥.`,
        !target.rating && target === ctx.user && '\n–í–≤–µ–¥–∏—Ç–µ `–ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–ø`, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥.'
      ])
      .keyboard(Keyboard.builder()
        .textButton({ label: '–¢–æ–ø', payload: { command: `–ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–ø id${target.vkId}` } })
        .inline())
      .answer();
  }
}
