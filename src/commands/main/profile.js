import { Op } from 'sequelize'
import { Keyboard } from 'vk-io'

class TopsSubcommand {
  name = '—Ç–æ–ø'
  arguments = {
    target: { name: '–∏–≥—Ä–æ–∫', type: 'user', optional: true }
  }

  async handler (ctx) {
    const { User } = ctx.getPlugin('common/users');
    const { Pet } = ctx.getPlugin('systems/pets');
    const { SeedsStat, getStat } = ctx.getPlugin('bot/gameSeeds');

    const target = ctx.params.target || ctx.user;

    const pet = await target.pets.get();
    const seedsStat = await getStat(target.vkId);
  
    const balance = await User.count({ where: { money: { [Op.gte]: target.money } } });
    const petPos = pet && await Pet.count({ where: { rating: { [Op.gte]: pet.rating } } });
    const seedsPos = seedsStat && await SeedsStat.count({ where: { count: { [Op.gte]: seedsStat } } });

    const counts = await Promise.all([
      User.count(),
      Pet.count(),
      SeedsStat.count()
    ]);

    target.rating = counts.reduce((acc, v) => acc + v) - balance - (petPos || counts[1]) - (seedsPos || counts[2]);
    target.save()

    ctx.answer([
      `üîº ${target}:\n`,
      `üí≥ ‚Ññ${balance} –ø–æ –±–∞–ª–∞–Ω—Å—É.`,
      pet ? `üêæ ‚Ññ${petPos} –ø–æ –ø–∏—Ç–æ–º—Ü—É.` : '‚≠ï –ù–µ—Ç –≤ –ø–∏—Ç–æ–º—Ü–∞—Ö.',
      seedsStat ? `üåª ‚Ññ${seedsPos} –ø–æ —Å–µ–º–µ—á–∫–∞–º.` : '‚≠ï –ù–µ—Ç –≤ —Å–µ–º–µ—á–∫–∞—Ö.',
      `\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${target.rating} –µ–¥.`
    ])
  }
}

export default class ProfileCommand {
  name = '–ø—Ä–æ—Ñ–∏–ª—å'
  description = '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–µ'
  emoji = 'üë§'
  arguments = {
    target: { name: '–∏–≥—Ä–æ–∫', type: 'user', optional: true }
  }

  subcommands = [
    new TopsSubcommand()
  ];

  async handler (ctx) {
    const { briefNumber } = ctx.getPlugin('systems/moneys')

    const target = ctx.params.target || ctx.user
    ctx.user.achievements.unlockIf('itsMe', target === ctx.user)

    const { list, Achievement } = ctx.getPlugin('systems/achievements')
    const unlockedCount = await Achievement.count({ where: { vkId: ctx.user.vkId } })
    const job = target.jobs.get()

    ctx.builder()
      .lines([
        `üëÄ ${target}:`,
        target.role !== 'user' && `üîë ${target.pex.get().title}.`,
        `üí≥ ${target.moneys.getLocaled()} –±–∏—Ç.`,
        job && `üíº ${job.name} [${briefNumber(job.salary)}].`,
        `üèÖ –ê—á–∏–≤–æ–∫: ${unlockedCount}/${list.length} —à—Ç.`,
        `‚ö° LVL: ${target.level} (${target.lvl.getProgress()}%).`,
        target.rating && `‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${target.rating} –µ–¥.`,
        !target.rating && target === ctx.user && '\n–í–≤–µ–¥–∏—Ç–µ `–ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–ø`, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥.'
      ])
      .keyboard(Keyboard.builder()
        .textButton({ label: '–¢–æ–ø', payload: { command: `–ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–ø id${target.vkId}` } })
        .inline()
      )
      .answer()
  }
}