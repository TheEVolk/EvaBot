export default class {
  constructor () {
    Object.assign(this, {
      name: '–≥–æ—Ä–æ–¥',
      description: '–º–µ—Å—Ç–∞ –≤ –≥–æ—Ä–æ–¥–µ',
      emoji: 'üèô'
    })
  }

  async handler (ctx) {
    const places = {
      casino: { name: '–ö–∞–∑–∏–Ω–æ', emoji: 'üé∞', command: '–∫–∞–∑–∏–Ω–æ' },
      petshelter: { name: '–ü—Ä–∏—é—Ç', emoji: 'üêæ', command: '–ø—Ä–∏—é—Ç' },
      autosalon: { name: '–ê–≤—Ç–æ—Å–∞–ª–æ–Ω', emoji: 'üöó', command: '–∞–≤—Ç–æ—Å–∞–ª–æ–Ω' }
    }

    const city = ctx.user.getCity()

    const keyboard = ctx.keyboard().oneTime(false)
    city.places.forEach((v, i) => {
      if (i % 2 === 0) keyboard.row()
      const place = places[v]
      keyboard.textButton({
        label: `${place.emoji} ${place.name}`,
        payload: { botcmd: place.command },
        color: 'primary'
      })
    })

    ctx.answer({
      keyboard,
      message: [
      `üèô –ì–æ—Ä–æ–¥ ${city.name}`,
      '\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –≥–æ—Ä–æ–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ.'
      ]
    })
  }
}
