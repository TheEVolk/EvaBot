import { Keyboard } from 'vk-io'
import { Op } from 'sequelize'

class OtherSubcommand {
  name = '–ø—Ä–æ—á–µ–µ'

  handler (ctx) {
    ctx.builder()
      .text('‚¨ú –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.')
      .keyboard(Keyboard.builder()
        .textButton({ label: `–¢–æ–ø`, payload: { command: '–ø–∏—Ç —Ç–æ–ø' } })
        .row()
        .textButton({ label: `–ù–∞–∑–∞–¥`, payload: { command: '–ø–∏—Ç' } })
        .oneTime()
      )
      .answer()
  }
}

class TopSubcommand {
  name = '—Ç–æ–ø'

  async handler (ctx) {
    const { Pet } = ctx.getPlugin('systems/pets')

    const myPet = await ctx.user.pets.get()
    const myPetPos = myPet && await Pet.count({ where: { rating: { [Op.gte]: myPet.rating } } })

    const pets = await Pet.findAll({ order: [['rating', 'DESC']], limit: 5 })

    ctx.builder()
      .text('üìä –¢–æ–ø 5 –ø–∏—Ç–æ–º—Ü–µ–≤:')
      .lines(pets.map(
        (v, i) => `${i + 1}‚É£ [id${v.ownerVkId}|${v.name}]\n‚Äî ${v.rating} –µ–¥.`
      ))
      .line(myPet && `\nüîº –í–∞—à ‚Ññ${myPetPos} –≤ —Ç–æ–ø–µ!`)
      .keyboard(Keyboard.builder()
        .textButton({ label: `–ù–∞–∑–∞–¥`, payload: { command: '–ø–∏—Ç' } })
        .oneTime()
      )
      .answer()
  }
}

export default class PetCommand {
  name = '–ø–∏—Ç'
  description = '—Ç–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü'
  emoji = 'üêæ'
  subcommands = [
    new OtherSubcommand(),
    new TopSubcommand()
  ]

  async handler (ctx) {
    if (!ctx.user.pex.is('indev')) {
      return ctx.builder()
        .photo('res/img/indev.png')
        .answer()
    }

    const pet = await ctx.user.pets.get()
    
    ctx.builder()
      .lines([
        `${pet.kind.emoji} ${pet.name}`,
        `‚ú® –†–µ–π—Ç–∏–Ω–≥: ${pet.rating} –µ–¥.`,
        `‚ö° –°–∏–ª–∞: ${pet.force} –µ–¥.`
      ])
      .keyboard(Keyboard.builder()
        .textButton({ label: `–ü—Ä–æ—á–µ–µ`, payload: { command: '–ø–∏—Ç –ø—Ä–æ—á–µ–µ' } })
        .oneTime()
      )
      .answer()
  }
}

/*
  async topHandler (ctx) {
    const { Pet } = ctx.getPlugin('systems/pets')
    const myPet = await ctx.user.getPet()

    const emoji = ['', 'ü•á', 'ü•à', 'ü•â', 'üèÖ', 'üèÖ']
    const pets = await Pet.findAll({ order: [['rating', 'DESC']], limit: 5 })

    ctx.answer([
      'üìä –¢–æ–ø 5 –ø–∏—Ç–æ–º—Ü–µ–≤:',
      ctx.printList(pets, (v, i) => `>> ${emoji[i]} [id${v.ownerVkId}|${v.name}] - ${v.rating} –µ–¥`),
      myPet
        ? `\nüîº –í–∞—à –ø–∏—Ç–æ–º–µ—Ü ‚Ññ${await Pet.count({ where: { rating: { [Op.gte]: myPet.rating } } })} –≤ —Ç–æ–ø–µ!`
        : null
    ])
  }

  async playHandler (ctx) {
    const { play } = ctx.getPlugin('systems/pets')
    const pet = await ctx.user.assertPet(ctx, 'has')

    const gameSession = play.get(pet)
    if (gameSession) {
      return ctx.builder()
        .text(`‚è≥ –î–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã ${formatDistanceToNow(gameSession.startAt + 300000, { locale: ru })}.`)
        .botcmdButton('–ù–∞–∑–∞–¥', '–ø–∏—Ç', 'secondary')
        .answer()
    }

    play.run(pet)

    ctx.builder()
      .lines([
        `üèà –í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä–∞—Ç—å —Å ${pet.name}.`,
        '‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç 5 –º–∏–Ω—É—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.'
      ])
      .botcmdButton('–ù–∞–∑–∞–¥', '–ø–∏—Ç', 'secondary')
      .answer()
  }

  async duelHandler (ctx) {
    const { play, duel, messages } = ctx.getPlugin('systems/pets')
    const pet = await ctx.user.assertPet(ctx, 'has')
    const petType = pet.getType()

    ctx.assert(!play.get(pet), messages.busyErrorGame)
    ctx.assert(!duel.get(pet), messages.busyErrorDuel)

    const { tip } = ctx.params.enemy.createRequest({
      tag: 'pets:duel',
      text: [
        `${ctx.user.r()} –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞ –¥—É—ç–ª—å.`,
        '',
        `${petType.emoji} ${petType.name} ¬´${pet.name}¬ª:`,
        `‚†Ä‚†Ä‚ú® –†–µ–π—Ç–∏–Ω–≥: ${pet.rating} –µ–¥;`,
        `‚†Ä‚†Ä‚ö° –°–∏–ª–∞: ${pet.force} –µ–¥;`
      ].join('\n'),
      peer: ctx.msg.peer_id
    }, ctx.user)

    ctx.builder()
      .lines([`üí• –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ${ctx.params.enemy.r()} –∑–∞—è–≤–∫—É –Ω–∞ –¥—É—ç–ª—å.`, tip])
      .botcmdButton('–ù–∞–∑–∞–¥', '–ø–∏—Ç', 'secondary')
      .answer()
  }
*/
