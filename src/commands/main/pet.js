import { Keyboard } from 'vk-io';
import { Op } from 'sequelize';

class OtherSubcommand {
  name = '–ø—Ä–æ—á–µ–µ';

  handler(ctx) {
    ctx.builder()
      .text('‚¨ú –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.')
      .keyboard(Keyboard.builder()
        .textButton({ label: '–¢–æ–ø', payload: { command: '–ø–∏—Ç —Ç–æ–ø' } })
        .row()
        .textButton({ label: '–ù–∞–∑–∞–¥', payload: { command: '–ø–∏—Ç' } })
        .oneTime())
      .answer();
  }
}

class TopSubcommand {
  name = '—Ç–æ–ø'

  async handler(ctx) {
    const { Pet } = ctx.getPlugin('systems/pets');

    const myPet = await ctx.user.pets.get();
    const myPetPos = myPet && await Pet.count({ where: { rating: { [Op.gte]: myPet.rating } } });

    const pets = await Pet.findAll({ order: [['rating', 'DESC']], limit: 5 });

    ctx.builder()
      .text('üìä –¢–æ–ø 5 –ø–∏—Ç–æ–º—Ü–µ–≤:')
      .lines(pets.map(
        (v, i) => `${i + 1}‚É£ [id${v.ownerVkId}|${v.name}]\n‚Äî ${v.rating} –µ–¥.`
      ))
      .line(myPet && `\nüîº –í–∞—à ‚Ññ${myPetPos} –≤ —Ç–æ–ø–µ!`)
      .keyboard(Keyboard.builder()
        .textButton({ label: '–ù–∞–∑–∞–¥', payload: { command: '–ø–∏—Ç' } })
        .oneTime())
      .answer();
  }
}

class PlaySubcommand {
  name = '–∏–≥—Ä–∞—Ç—å';

  async handler(ctx) {
    const petsPlugin = ctx.getPlugin('systems/pets');
    const pet = await ctx.user.pets.get();
    if (!pet) {
      return ctx.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞.');
    }

    const busy = petsPlugin.getBusy(pet.id);
    if (busy) {
      return ctx.answer(busy.data.getText().replace('%petname%', pet.name));
    }

    petsPlugin.createTask(pet.id, 'play', {
      endTime: Date.now() + 300e3
    });

    ctx.builder()
      .lines([
        `üèà –í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä–∞—Ç—å —Å ${pet.name}.`,
        '‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç 5 –º–∏–Ω—É—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.'
      ])
      .answer();
  }
}

class DuelRequestHandler {
  async accept(ctx, { source, sendResult, peers }) {
    const petsPlugin = ctx.getPlugin('systems/pets');
    const [myPet, enemyPet] = await Promise.all([
      ctx.user.pets.get(),
      source.pets.get()
    ]);

    if (!myPet || !enemyPet) {
      return ctx.answer('‚õî –£ –≤–∞—Å –∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∏—Ç–æ–º–µ—Ü.');
    }

    if (petsPlugin.getBusy(myPet) || petsPlugin.getBusy(enemyPet)) {
      return ctx.answer('‚õî –í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã –æ—Ç –¥–µ–ª.');
    }

    petsPlugin.createTask(myPet.id, 'duel', {
      healths: [100, 100],
      lastAttackerId: Math.random() >= 0.5 ? 1 : 0,
      targetId: enemyPet.id,
      peers
    });

    sendResult([`üî• ${myPet.name} VS ${enemyPet.name}.`, '‚ö° –ë–æ–π –Ω–∞—á–∞–ª—Å—è!']);
  }

  deny(ctx, { source }) {
    ctx.answer('‚≠ï –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –¥—É—ç–ª—å.');
    source.send(`‚≠ï ${ctx.user} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –¥—É—ç–ª—å.`);
  }
}

class DuelSubcommand {
  name = '–¥—É—ç–ª—å';
  arguments = {
    target: { name: '–ø—Ä–æ—Ñ–∏–ª—å', type: 'user', notSelf: true }
  };

  init(henta) {
    const reqPlugin = henta.getPlugin('common/req');
    reqPlugin.set('pet-duel', new DuelRequestHandler());
  }

  clear(henta) {
    const reqPlugin = henta.getPlugin('common/req');
    reqPlugin.unset('pet-duel');
  }

  async handler(ctx) {
    const petsPlugin = ctx.getPlugin('systems/pets');
    const [myPet, enemyPet] = await Promise.all([
      ctx.user.pets.get(),
      ctx.params.target.pets.get()
    ]);

    if (!myPet || !enemyPet) {
      return ctx.answer('‚õî –£ –≤–∞—Å –∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∏—Ç–æ–º–µ—Ü.');
    }

    if (petsPlugin.getBusy(myPet) || petsPlugin.getBusy(enemyPet)) {
      return ctx.answer('‚õî –í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã –æ—Ç –¥–µ–ª.');
    }

    const getSkill = pos => {
      const res = petsPlugin.skillFromSlug[myPet.skill.split('|')[pos]];
      return res ? res.name : '–Ω–µ—Ç.';
    };

    myPet.kind = petsPlugin.getKind(myPet.type);
    const { tip } = ctx.params.target.req.new({
      tag: 'pet-duel',
      text: [
        `${ctx.user} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞ –¥—É—ç–ª—å.`,
        `${myPet.kind.emoji} ${myPet.name}`,
        `‚ú® –†–µ–π—Ç–∏–Ω–≥: ${myPet.rating} –µ–¥.`,
        `‚ö° –°–∏–ª–∞: ${myPet.force} –µ–¥.`,
        `üí• –ê—Ç–∞–∫–∞: ${getSkill(0)}`,
        `üõ° –ó–∞—â–∏—Ç–∞: ${getSkill(1)}`
      ].join('\n'),
      peer: ctx.peerId
    }, ctx.user);

    ctx.answer([
      '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞...',
      tip
    ]);
  }
}

export default class PetCommand {
  name = '–ø–∏—Ç'
  description = '—Ç–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü'
  emoji = 'üêæ'
  subcommands = [
    new OtherSubcommand(),
    new TopSubcommand(),
    new PlaySubcommand(),
    new DuelSubcommand()
  ];

  init(henta) {
    this.subcommands[3].init(henta);
  }

  clear(henta) {
    this.subcommands[3].clear(henta);
  }

  async handler(ctx) {
    const petsPlugin = ctx.getPlugin('systems/pets');

    const pet = await ctx.user.pets.get();
    if (!pet) {
      return ctx.builder()
        .line('üêæ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞..')
        .keyboard(Keyboard.builder()
          .textButton({ label: '–ù–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞', color: 'primary', payload: { command: '–ø—Ä–∏—é—Ç' } }))
        .answer();
    }

    pet.kind = petsPlugin.getKind(pet.type);

    const getSkill = pos => {
      const res = petsPlugin.skillFromSlug[pet.skill.split('|')[pos]];
      return res ? res.name : '–Ω–µ—Ç.';
    };

    ctx.builder()
      .lines([
        `${pet.kind.emoji} ${pet.name}`,
        `‚ú® –†–µ–π—Ç–∏–Ω–≥: ${pet.rating} –µ–¥.`,
        `‚ö° –°–∏–ª–∞: ${pet.force} –µ–¥.`,
        `üí• –ê—Ç–∞–∫–∞: ${getSkill(0)}`,
        `üõ° –ó–∞—â–∏—Ç–∞: ${getSkill(1)}`
      ])
      .buttons(ctx, [
        { label: '–ò–≥—Ä–∞—Ç—å', payload: { command: '–ø–∏—Ç –∏–≥—Ä–∞—Ç—å' } },
        { label: '–£–º–µ–Ω–∏—è', payload: { command: '–ø–∏—Ç—Å–∫–∏–ª–ª' } },
        { label: '–ü—Ä–æ—á–µ–µ', payload: { command: '–ø–∏—Ç –ø—Ä–æ—á–µ–µ' } }
      ], 2)
      .answer();
  }
}
