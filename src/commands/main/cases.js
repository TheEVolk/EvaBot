import { Keyboard } from 'vk-io';

class OpenSubcommand {
  name = '–∏–Ω—Ñ–æ';
  arguments = {
    index: { name: '–∏–Ω–¥–µ–∫—Å', type: 'integer' }
  }

  noCaseAnswer (ctx) {
    ctx.builder()
        .line('üì¶ –≠—Ç–æ—Ç –∫–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        .keyboard(Keyboard.builder()
          .textButton({
            label: '–ö –∫–µ–π—Å–∞–º',
            color: 'primary',
            payload: {
              command: '–∫–µ–π—Å'
            }
          })
          .inline()
        )
        .answer()
  }

  async handler (ctx) {
    const casesPlugin = ctx.getPlugin('bot/cases');
    const cases = await casesPlugin.getCases(ctx.user.vkId);
    const currentCase = cases[ctx.params.index];

    if (!currentCase) {
      return this.noCaseAnswer(ctx);
    }

    ctx.builder()
      .attach(await casesPlugin.imager.get(currentCase.slug))
      .keyboard(Keyboard.builder()
        .textButton({
          label: '–û—Ç–∫—Ä—ã—Ç—å',
          color: 'primary',
          payload: {
            command: `–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å ${ctx.params.index}`
          }
        })
        .inline()
      )
      .answer()
  }
}

class InfoSubcommand {
  name = '–∏–Ω—Ñ–æ';
  arguments = {
    index: { name: '–∏–Ω–¥–µ–∫—Å', type: 'integer' }
  }

  noCaseAnswer (ctx) {
    ctx.builder()
        .line('üì¶ –≠—Ç–æ—Ç –∫–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        .keyboard(Keyboard.builder()
          .textButton({
            label: '–ö –∫–µ–π—Å–∞–º',
            color: 'primary',
            payload: {
              command: '–∫–µ–π—Å'
            }
          })
          .inline()
        )
        .answer()
  }

  async handler (ctx) {
    const casesPlugin = ctx.getPlugin('bot/cases');
    const cases = await casesPlugin.getCases(ctx.user.vkId);
    const currentCase = cases[ctx.params.index];

    if (!currentCase) {
      return this.noCaseAnswer(ctx);
    }

    ctx.builder()
      .attach(await casesPlugin.imager.get(currentCase.slug))
      .keyboard(Keyboard.builder()
        .textButton({
          label: '–û—Ç–∫—Ä—ã—Ç—å',
          color: 'primary',
          payload: {
            command: `–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å ${ctx.params.index}`
          }
        })
        .inline()
      )
      .answer()
  }
}

export default class CasesCommand {
  name = '–∫–µ–π—Å';
  description = '–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–∑–æ–≤';
  emoji = 'üì¶';
  private = true;

  async handler (ctx) {
    const casesPlugin = ctx.getPlugin('bot/cases');
    const cases = await casesPlugin.getCases(ctx.user.vkId);

    if (!cases) {
      return this.noCasesAnswer(ctx);
    }
    
    ctx.builder()
      .lines(
        'üì¶ –í–∞—à–∏ –∫–µ–π—Å—ã:',
        ...cases.map((v, i) => `${i+1} >> ${v.title}.`),
        cases.length === 0 && '>> –£ –≤–∞—Å –Ω–µ—Ç –∫–µ–π—Å–æ–≤.',
        'üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–µ–π—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.'
      )
      .keyboard(Keyboard.builder()
          .textButton({
            label: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å',
            color: 'primary',
            payload: {
              command: '–∫–µ–π—Å –±–æ–Ω—É—Å'
            }
          })
          .inline()
        )
        .answer()      
  }
}
