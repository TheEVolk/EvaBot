import { Keyboard } from 'vk-io';
import moment from 'moment';

class FindSubcommand {
  name = '–∏—Å–∫–∞—Ç—å'

  handler(ctx) {
    if (ctx.user.job) {
      return ctx.oops('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞.', '–ù–∞–∑–∞–¥', '—Ä–∞–±–æ—Ç–∞');
    }

    const jobsPlugin = ctx.getPlugin('systems/jobs');
    const redisPlugin = ctx.getPlugin('common/redis');
    const job = ctx.henta.util.pickRandom(jobsPlugin);

    redisPlugin.set(`jobs:select:${ctx.user.vkId}`, job.slug);

    ctx.builder()
      .lines([
        `üíº –†–∞–±–æ—Ç–∞: ${job.name}`,
        `üí≤ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${job.salary.toLocaleString()} –±–∏—Ç.`,
        `üíµ –¶–µ–Ω–∞: ${job.price.toLocaleString()} –±–∏—Ç.`
      ])
      .buttons(ctx, [
        { label: '–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è', color: 'primary', payload: { command: '—Ä–∞–±–æ—Ç–∞ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è' } },
        { label: '–°–ª–µ–¥—É—é—â–∞—è', payload: { command: '—Ä–∞–±–æ—Ç–∞ –∏—Å–∫–∞—Ç—å' } },
        { label: '–ù–∞–∑–∞–¥', payload: { command: '—Ä–∞–±–æ—Ç–∞' } }
      ])
      .answer();
  }
}

class GetJobSubcommand {
  name = '—É—Å—Ç—Ä–æ–∏—Ç—å—Å—è'

  async handler(ctx) {
    if (ctx.user.job) {
      return ctx.builder()
        .line('üßß –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞.')
        .keyboard(Keyboard.builder()
          .textButton({ label: '–ù–∞–∑–∞–¥', color: 'primary', payload: { command: '—Ä–∞–±–æ—Ç–∞' } })
          .textButton({ label: '–£–≤–æ–ª–∏—Ç—å—Å—è', color: 'negative', payload: { command: '—Ä–∞–±–æ—Ç–∞ —É–≤–æ–ª–∏—Ç—å—Å—è' } }))
        .answer();
    }

    const jobsPlugin = ctx.getPlugin('systems/jobs');
    const redisPlugin = ctx.getPlugin('common/redis');
    const job = jobsPlugin.fromSlug[await redisPlugin.get(`jobs:select:${ctx.user.vkId}`)];
    if (!job) {
      return ctx.builder()
        .text('üîé –î–∞–≤–∞–π—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥—ë–º —Ä–∞–±–æ—Ç—É.')
        .keyboard(Keyboard.builder()
          .textButton({ label: '–ò—Å–∫–∞—Ç—å', color: 'primary', payload: { command: '—Ä–∞–±–æ—Ç–∞ –∏—Å–∫–∞—Ç—å' } })
          .textButton({ label: '–ù–∞–∑–∞–¥', payload: { command: '—Ä–∞–±–æ—Ç–∞' } })
          .oneTime())
        .answer();
    }

    ctx.user.job = job.slug;

    ctx.builder()
      .lines([
        '‚úî –í—ã —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É!'// ,
        // `üí≤ –ó–∞—Ä–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å, –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`
      ])
      .keyboard(Keyboard.builder()
        .textButton({ label: '–ù–∞–∑–∞–¥', payload: { command: '—Ä–∞–±–æ—Ç–∞' } })
        .oneTime())
      .answer();
  }
}

class ResignSubcommand {
  name = '—É–≤–æ–ª–∏—Ç—å—Å—è'

  async handler(ctx) {
    if (!ctx.user.job) {
      return ctx.builder()
        .line('üßß –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—Ç—ã.')
        .keyboard(Keyboard.builder()
          .textButton({ label: '–ò—Å–∫–∞—Ç—å', color: 'primary', payload: { command: '—Ä–∞–±–æ—Ç–∞ –∏—Å–∫–∞—Ç—å' } })
          .textButton({ label: '–ù–∞–∑–∞–¥', payload: { command: '—Ä–∞–±–æ—Ç–∞' } }))
        .answer();
    }

    ctx.user.job = null;

    ctx.builder()
      .text('‚úî –í—ã —É–≤–æ–ª–∏–ª–∏—Å—å —Å —Ä–∞–±–æ—Ç—ã!')
      .keyboard(Keyboard.builder()
        .textButton({ label: '–ò—Å–∫–∞—Ç—å', color: 'primary', payload: { command: '—Ä–∞–±–æ—Ç–∞ –∏—Å–∫–∞—Ç—å' } })
        .textButton({ label: '–ú–µ–Ω—é', payload: { command: '–º–µ–Ω—é' } })
        .oneTime())
      .answer();
  }
}

class SalarySubcommand {
  name = '–∑–ø';

  constructor() {
    moment.locale('ru');
  }

  timeOutAnswer(ctx, lastAttempt) {
    ctx.builder()
      .text(`‚åõ –ó–∞—Ä–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ ${moment.unix(lastAttempt / 1000 + 86400).fromNow()}.`)
      .keyboard(makeButtons(ctx, [
        ['–†–∞–±–æ—Ç–∞', '—Ä–∞–±–æ—Ç–∞', true]
      ]))
      .answer();
  }

  async handler(ctx) {
    const job = ctx.user.jobs.get();
    if (!job) {
      return ctx.builder()
        .line('üíº –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—Ç—ã..')
        .keyboard(makeButtons(ctx, [
          ['–ú–µ–Ω—é', '–º–µ–Ω—é', true]
        ]))
        .answer();
    }

    const redisPlugin = ctx.getPlugin('common/redis');

    const lastAttempt = await redisPlugin.get(`salary:${ctx.user.vkId}`) || 0;

    if (Date.now() - lastAttempt < 86400 * 1000) {
      return this.timeOutAnswer(ctx, lastAttempt);
    }

    redisPlugin.set(`salary:${ctx.user.vkId}`, Date.now());

    ctx.user.money += job.salary;

    ctx.builder()
      .text('üí≤ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç—É!')
      .keyboard(makeButtons(ctx, [
        ['–†–∞–±–æ—Ç–∞', '—Ä–∞–±–æ—Ç–∞', true]
      ]))
      .answer();
  }
}

export default class JobCommand {
  name = '—Ä–∞–±–æ—Ç–∞'
  description = '—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥'
  emoji = 'üíº'
  subcommands = [
    new FindSubcommand(this),
    new GetJobSubcommand(this),
    new ResignSubcommand(this),
    new SalarySubcommand(this)
  ]

  async handler(ctx) {
    const job = ctx.user.jobs.get();
    if (!job) {
      return ctx.builder()
        .line('üíº –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç—ã..')
        .keyboard(Keyboard.builder()
          .textButton({ label: '–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É', color: 'primary', payload: { command: '—Ä–∞–±–æ—Ç–∞ –∏—Å–∫–∞—Ç—å' } }))
        .answer();
    }

    ctx.builder()
      .line(`üíº –†–∞–±–æ—Ç–∞: ${job.name}`)
      .line(`üí≤ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${job.salary.toLocaleString()} –±–∏—Ç.`)
      .keyboard(Keyboard.builder()
        .textButton({ label: '–ó–∞—Ä–ø–ª–∞—Ç–∞', color: 'positive', payload: { command: '—Ä–∞–±–æ—Ç–∞ –∑–ø' } })
        .row()
        .textButton({ label: '–£–≤–æ–ª–∏—Ç—å—Å—è', color: 'negative', payload: { command: '—Ä–∞–±–æ—Ç–∞ —É–≤–æ–ª–∏—Ç—å—Å—è' } })
        .textButton({ label: '–ú–µ–Ω—é', payload: { command: '–º–µ–Ω—é' } })
        .oneTime())
      .answer();
  }
}
