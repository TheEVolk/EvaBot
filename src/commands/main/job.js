export default class {
  name = '—Ä–∞–±–æ—Ç–∞'
  description = '—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥'
  emoji = 'üíº'

  async handler (ctx) {
    const imageCachePlugin = ctx.getPlugin('common/imageCache')
    ctx.builder()
      .attach(imageCachePlugin.get('res/img/indev.png'))
      .answer()
    /*
    const job = ctx.user.getJob()
    if (!job) {
      return ctx.builder()
        .line('üíº –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç—ã:')
        .line('üîò –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É.')
        .answer()
    }

    ctx.builder()
      .line(`üíº –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞: ${job.name}`)
      .line(`üí≤ –í–∞—à–∞ –ó–ü: ${job.payday}`)
      .answer() */
  }
}

/*
export default class {
  constructor () {
    Object.assign(this, {
      name: '—Ä–∞–±–æ—Ç–∞',
      description: '–≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞',
      emoji: 'üíº',
      subcommands: {
        —É–≤–æ–ª–∏—Ç—å—Å—è: { handler: this.retireHandler },
        –≥–∞–∑–µ—Ç–∞: { handler: this.findHandler },
        –∏–Ω—Ñ–æ: {
          handler: this.infoHandler,
          arguments: { job: { name: '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', type: 'job' } }
        },
        —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è: {
          handler: this.chooseHandler,
          arguments: { job: { name: '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', type: 'job' } }
        }
      }
    })
  }

  handler (ctx) {
    const job = ctx.assert(ctx.user.getJob(), {
      message: ['üíº –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç—ã.', 'üìë –°–∞–º–æ–µ –≤—Ä–µ–º—è —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è!'],
      keyboard: ctx.keyboard()
        .textButton({
          label: 'üîç –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É',
          payload: { botcmd: '—Ä–∞–±–æ—Ç–∞ –≥–∞–∑–µ—Ç–∞' }
        })
    })

    ctx.params = { job }
    this.infoHandler(ctx)
  }

  infoHandler (ctx) {
    const { briefNumber } = ctx.getPlugin('mybot/moneys')
    const job = ctx.params.job

    const builder = ctx.builder()
    builder.lines([
      `üíº ${job.name}:`,
      `üìã ${job.description}`,
      '',
      `üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${briefNumber(job.payDay)} –±–∏—Ç.`,
      `üîí –î–æ—Å—Ç—É–ø–Ω–æ —Å ${job.minLvl} —É—Ä–æ–≤–Ω—è.`
    ])

    if (!ctx.user.job) {
      builder.textButton({
        label: 'üìù –£—Å—Ç—Ä–æ–∏—Ç—å—Å—è',
        payload: { botcmd: `—Ä–∞–±–æ—Ç–∞ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è ${job.name}` }
      })
    } else {
      builder.textButton({
        label: 'üö™ –£–≤–æ–ª–∏—Ç—å—Å—è',
        payload: { botcmd: '—Ä–∞–±–æ—Ç–∞ —É–≤–æ–ª–∏—Ç—å—Å—è' }
      })
    }

    builder.answer()
  }

  retireHandler (ctx) {
    ctx.user.assertJob(ctx, 'has')
    ctx.user.job = null

    ctx.builder()
      .lines(['‚úî –í—ã —É—Å–ø–µ—à–Ω–æ —É–≤–æ–ª–∏–ª–∏—Å—å —Å —Ä–∞–±–æ—Ç—ã!'])
      .textButton({ label: 'üíº –ö —Ä–∞–±–æ—Ç–∞–º', payload: { botcmd: '—Ä–∞–±–æ—Ç–∞ –≥–∞–∑–µ—Ç–∞' } })
  }

  findHandler (ctx) {
    const jobsPlugin = ctx.getPlugin('systems/jobs')

    const keyboard = ctx.keyboard().oneTime(false)

    jobsPlugin.list.forEach((v, i) => {
      if (i % 2 === 0) keyboard.row()
      keyboard.textButton({
        label: `${v.name}`,
        payload: { botcmd: `—Ä–∞–±–æ—Ç–∞ –∏–Ω—Ñ–æ ${v.name}` },
        color: 'primary'
      })
    })

    ctx.builder([
      'üå∑ –í—ã–±–∏—Ä–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É!',
      ...jobsPlugin.list.map((v, i, { length }) => `${i + 1}.‚†Ä${v.name} -- ${v.payDay} –±–∏—Ç –≤ —Å—É—Ç–∫–∏${i === length - 1 ? '.' : ';'}`
      )]).keyboard(keyboard).answer()
  }

  chooseHandler (ctx) {
    ctx.user.assertJob(ctx, 'free')
    ctx.user.job = ctx.params.job.tag

    ctx.answer([
      `‚úî –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É <<${ctx.params.job.name}>>`,
      `
–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:15 (–ú–°–ö).`
    ])
  }
}
*/
