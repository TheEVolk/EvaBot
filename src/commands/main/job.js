import { Keyboard } from 'vk-io'

class FindSubcommand {
  name = '–∏—Å–∫–∞—Ç—å'

  handler (ctx) {
    if (ctx.user.job) {
      return ctx.builder()
        .line('üßß –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞.')
        .keyboard(Keyboard.builder()
          .textButton({ label: `–ù–∞–∑–∞–¥`, color: 'primary', payload: { command: '—Ä–∞–±–æ—Ç–∞' } })
          .textButton({ label: `–£–≤–æ–ª–∏—Ç—å—Å—è`, color: 'negative', payload: { command: '—Ä–∞–±–æ—Ç–∞ —É–≤–æ–ª–∏—Ç—å—Å—è' } })
        )
        .answer()
    }

    const jobsPlugin = ctx.getPlugin('systems/jobs')
    const redisPlugin = ctx.getPlugin('common/redis')
    const job = jobsPlugin.list[Math.floor(Math.random() * jobsPlugin.list.length)]

    redisPlugin.set(`jobs:select:${ctx.user.vkId}`, job.slug)

    ctx.builder()
      .lines([
        `üíº –†–∞–±–æ—Ç–∞: ${job.name}`,
        `üí≤ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${job.salary.toLocaleString()} –±–∏—Ç.`,
        `üíµ –¶–µ–Ω–∞: ${job.price.toLocaleString()} –±–∏—Ç.`
      ])
      .keyboard(Keyboard.builder()
        .textButton({ label: `–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è`, color: 'primary', payload: { command: '—Ä–∞–±–æ—Ç–∞ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è' } })
        .textButton({ label: `–°–ª–µ–¥—É—é—â–∞—è`, payload: { command: '—Ä–∞–±–æ—Ç–∞ –∏—Å–∫–∞—Ç—å' } })
        .row()
        .textButton({ label: `–ù–∞–∑–∞–¥`, payload: { command: '—Ä–∞–±–æ—Ç–∞' } })
        .oneTime()
      )
      .answer()
  }
}

class GetJobSubcommand {
  name = '—É—Å—Ç—Ä–æ–∏—Ç—å—Å—è'

  async handler (ctx) {
    if (ctx.user.job) {
      return ctx.builder()
        .line('üßß –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞.')
        .keyboard(Keyboard.builder()
          .textButton({ label: `–ù–∞–∑–∞–¥`, color: 'primary', payload: { command: '—Ä–∞–±–æ—Ç–∞' } })
          .textButton({ label: `–£–≤–æ–ª–∏—Ç—å—Å—è`, color: 'negative', payload: { command: '—Ä–∞–±–æ—Ç–∞ —É–≤–æ–ª–∏—Ç—å—Å—è' } })
        )
        .answer()
    }

    const jobsPlugin = ctx.getPlugin('systems/jobs')
    const redisPlugin = ctx.getPlugin('common/redis')
    const job = jobsPlugin.fromSlug[await redisPlugin.get(`jobs:select:${ctx.user.vkId}`)]
    if (!job) {
      return ctx.builder()
        .text(`üîé –î–∞–≤–∞–π—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥—ë–º —Ä–∞–±–æ—Ç—É.`)
        .keyboard(Keyboard.builder()
          .textButton({ label: `–ò—Å–∫–∞—Ç—å`, color: 'primary', payload: { command: '—Ä–∞–±–æ—Ç–∞ –∏—Å–∫–∞—Ç—å' } })
          .textButton({ label: `–ù–∞–∑–∞–¥`, payload: { command: '—Ä–∞–±–æ—Ç–∞' } })
          .oneTime()
        )
        .answer()
    }

    ctx.user.job = job.slug

    ctx.builder()
      .lines([
        `‚úî –í—ã —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É!`// ,
        // `üí≤ –ó–∞—Ä–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å, –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`
      ])
      .keyboard(Keyboard.builder()
        .textButton({ label: `–ù–∞–∑–∞–¥`, payload: { command: '—Ä–∞–±–æ—Ç–∞' } })
        .oneTime()
      )
      .answer()
  }
}

class ResignSubcommand {
  name = '—É–≤–æ–ª–∏—Ç—å—Å—è'

  async handler (ctx) {
    if (!ctx.user.job) {
      return ctx.builder()
        .line('üßß –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—Ç—ã.')
        .keyboard(Keyboard.builder()
          .textButton({ label: `–ò—Å–∫–∞—Ç—å`, color: 'primary', payload: { command: '—Ä–∞–±–æ—Ç–∞ –∏—Å–∫–∞—Ç—å' } })
          .textButton({ label: `–ù–∞–∑–∞–¥`, payload: { command: '—Ä–∞–±–æ—Ç–∞' } })
        )
        .answer()
    }

    ctx.user.job = null

    ctx.builder()
      .text(`‚úî –í—ã —É–≤–æ–ª–∏–ª–∏—Å—å —Å —Ä–∞–±–æ—Ç—ã!`)
      .keyboard(Keyboard.builder()
        .textButton({ label: `–ò—Å–∫–∞—Ç—å`, color: 'primary', payload: { command: '—Ä–∞–±–æ—Ç–∞ –∏—Å–∫–∞—Ç—å' } })
        .textButton({ label: `–ú–µ–Ω—é`, payload: { command: '–º–µ–Ω—é' } })
        .oneTime()
      )
      .answer()
  }
}

export default class JobCommand {
  name = '—Ä–∞–±–æ—Ç–∞'
  description = '—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥'
  emoji = 'üíº'
  subcommands = [
    new FindSubcommand(this),
    new GetJobSubcommand(this),
    new ResignSubcommand(this)
  ]

  async handler (ctx) {
    const job = ctx.user.jobs.get()
    if (!job) {
      return ctx.builder()
        .line('üíº –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç—ã..')
        .keyboard(Keyboard.builder()
          .textButton({ label: `–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É`, color: 'primary', payload: { command: '—Ä–∞–±–æ—Ç–∞ –∏—Å–∫–∞—Ç—å' } })
        )
        .answer()
    }

    ctx.builder()
      .line(`üíº –†–∞–±–æ—Ç–∞: ${job.name}`)
      .line(`üí≤ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${job.salary.toLocaleString()} –±–∏—Ç.`)
      .keyboard(Keyboard.builder()
        .textButton({ label: `–£–≤–æ–ª–∏—Ç—å—Å—è`, color: 'negative', payload: { command: '—Ä–∞–±–æ—Ç–∞ —É–≤–æ–ª–∏—Ç—å—Å—è' } })
        .textButton({ label: `–ú–µ–Ω—é`, payload: { command: '–º–µ–Ω—é' } })
        .oneTime()
      )
      .answer()
  }
}
