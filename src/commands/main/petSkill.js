class InfoSubcommand {
  name = '–∏–Ω—Ñ–æ';
  arguments = {
    slug: { name: 'slug', type: 'word' }
  };

  async handler(ctx) {
    const petsPlugin = ctx.getPlugin('systems/pets');
    const skill = petsPlugin.skillFromSlug[ctx.params.slug];
    if (!skill) {
      return ctx.answer('‚õî –£–º–µ–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    }

    ctx.builder()
      .lines([
        `‚ö° ${skill.name}`,
        skill.type === 'attack' ? 'üí• –¢–∏–ø: –ê—Ç–∞–∫–∞' : 'üõ° –¢–∏–ø: –ó–∞—â–∏—Ç–∞',
        `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${skill.description}`,
        `\nüìö –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è: ${petsPlugin.kinds.filter(v => v.skill.includes(skill.slug)).map(v => v.name).join(', ')}.`
      ])
      .buttons(ctx, [
        { label: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', payload: { command: `–ø–∏—Ç—Å–∫–∏–ª–ª —Å–µ—Ç ${skill.slug}` }, color: 'positive' },
        { label: '–ù–∞–∑–∞–¥', payload: { command: '–ø–∏—Ç—Å–∫–∏–ª–ª' } }
      ], 2)
      .answer();
  }
}

class SetSubcommand {
  name = '—Å–µ—Ç';
  arguments = {
    slug: { name: 'slug', type: 'word' }
  };

  async handler(ctx) {
    const petsPlugin = ctx.getPlugin('systems/pets');
    const oneSkill = petsPlugin.skillFromSlug[ctx.params.slug];
    if (!oneSkill) {
      return ctx.answer('‚õî –£–º–µ–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    }

    const pet = await ctx.user.pets.get();
    if (!pet) {
      return ctx.oops('–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞.');
    }

    const kind = petsPlugin.getKind(pet.type);
    if (!kind.skill.includes(oneSkill.slug)) {
      return ctx.answer('‚õî –í–∞—à–µ–º—É –ø–∏—Ç–æ–º—Ü—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–∞–∫–æ–µ —É–º–µ–Ω–∏–µ.');
    }

    pet.setSkill({ [oneSkill.type]: oneSkill.slug });
    pet.save();

    const skill = pet.getSkill();

    ctx.builder()
      .lines([
        '‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–æ:',
        `üí• –ê—Ç–∞–∫–∞: ${skill.attack ? skill.attack.name : '–Ω–µ—Ç'}`,
        `üõ° –ó–∞—â–∏—Ç–∞: ${skill.defend ? skill.defend.name : '–Ω–µ—Ç'}`
      ])
      .buttons(ctx, [{ label: '–ù–∞–∑–∞–¥', payload: { command: '–ø–∏—Ç—Å–∫–∏–ª–ª' } }])
      .answer();
  }
}

export default class PetSkillCommand {
  name = '–ø–∏—Ç—Å–∫–∏–ª–ª';
  description = '—É–º–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞';
  emoji = 'ü¶†';
  subcommands = [
    new InfoSubcommand(),
    new SetSubcommand()
  ];

  async handler(ctx) {
    const pet = await ctx.user.pets.get();
    if (!pet) {
      return ctx.oops('–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞.');
    }

    const skill = pet.getSkill();
    const available = pet.getAvailableSkill();

    ctx.builder()
      .lines([
        `üí• –ê—Ç–∞–∫–∞: ${skill.attack ? skill.attack.name : '–Ω–µ—Ç'}`,
        `üõ° –ó–∞—â–∏—Ç–∞: ${skill.defend ? skill.defend.name : '–Ω–µ—Ç'}`,
        `\nüìö –î–æ—Å—Ç—É–ø–Ω–æ: ${available.map(v => v.name).join(', ')}.`
      ])
      .buttons(ctx, available.map(v => ({
        label: v.name,
        payload: { command: `–ø–∏—Ç—Å–∫–∏–ª–ª –∏–Ω—Ñ–æ ${v.slug}` }
      })), 2)
      .answer();
  }
}
