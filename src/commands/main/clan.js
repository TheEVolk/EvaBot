class SlotSubcommand {
  name = '—Å–ª–æ—Ç';

  async handler(ctx) {
    const clan = await ctx.user.clans.get();
    if (!clan) {
      return ctx.oops('–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ', '–ù–∞–∑–∞–¥', '–∫–ª–∞–Ω');
    }

    const price = Math.floor(1000 * 1.6 ** clan.slots);
    if (ctx.user.money < price) {
      return ctx.oops(`–£ –≤–∞—Å –Ω–µ—Ç ${price.toLocaleString('ru')} –±–∏—Ç`, '–ù–∞–∑–∞–¥', '–∫–ª–∞–Ω');
    }

    ctx.user.money -= price;
    clan.slots += 1;
    clan.save();

    ctx.builder()
      .text('‚úÖ –í—ã –∫—É–ø–∏–ª–∏ —Å–ª–æ—Ç—ã –¥–ª—è –∫–ª–∞–Ω–∞.')
      .buttons(ctx, [
        { label: '–ö—É–ø–∏—Ç—å –µ—â—ë', color: 'primary', payload: { command: '–∫–ª–∞–Ω —Å–ª–æ—Ç' } },
        { label: '–ö –∫–ª–∞–Ω—É', payload: { command: '–∫–ª–∞–Ω' } }
      ])
      .answer();
  }
}

class CreateSubcommand {
  name = '—Å–æ–∑–¥–∞—Ç—å';
  arguments = {
    name: { name: '–Ω–∞–∑–≤–∞–Ω–∏–µ', type: 'string' }
  };

  async handler(ctx) {
    if (await ctx.user.clans.getMember()) {
      return ctx.oops('–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ', '–ö –∫–ª–∞–Ω—É', '–∫–ª–∞–Ω');
    }

    if (ctx.user.money < 1e8) {
      return ctx.oops('–£ –≤–∞—Å –Ω–µ—Ç 100 000 000 –±–∏—Ç', '–ù–∞–∑–∞–¥', '–∫–ª–∞–Ω');
    }

    const clansPlugin = ctx.getPlugin('systems/clans');
    const clan = await clansPlugin.createClan({
      name: ctx.params.name,
      ownerVkId: ctx.user.vkId
    });

    ctx.user.money -= 1e8;

    ctx.builder()
      .text(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∫–ª–∞–Ω ‚Ññ${clan.id}.`)
      .buttons(ctx, [
        { label: '–ö –∫–ª–∞–Ω—É', color: 'primary', payload: { command: '–∫–ª–∞–Ω' } }
      ])
      .answer();
  }
}

class ModeSubcommand {
  name = '—Ä–µ–∂–∏–º';

  async handler(ctx) {
    const clan = await ctx.user.clans.get();
    if (!clan || clan.ownerVkId !== ctx.user.vkId) {
      return ctx.oops('–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞', '–ù–∞–∑–∞–¥', '–∫–ª–∞–Ω');
    }

    clan.isClosed = !clan.isClosed;
    clan.save();

    ctx.answer([
      clan.isClosed ? 'üîí –í—ã –∑–∞–∫—Ä—ã–ª–∏ –∫–ª–∞–Ω.' : 'üîì –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–ª–∞–Ω.',
      clan.isClosed
        ? '\n–¢–µ–ø–µ—Ä—å –≤ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.'
        : '\n–¢–µ–ø–µ—Ä—å –ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω.'
    ]);
  }
}

class MembersSubcommand {
  name = '—É—á–∞—Å—Ç–Ω–∏–∫–∏';
  arguments = {
    clan: { name: '–∫–ª–∞–Ω', type: 'clan' }
  };

  async handler(ctx) {
    const clanMembers = await ctx.params.clan.getMembers();

    ctx.builder()
      .line('üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:')
      .lines(clanMembers.map((v, i) => `${i + 1}. ${v}`))
      .answer();
  }
}

class KickSubcommand {
  name = '–≤—ã–≥–Ω–∞—Ç—å';
  arguments = {
    target: { name: '—Ü–µ–ª—å', type: 'user', notSelf: true }
  };

  async handler(ctx) {
    const clan = await ctx.user.clans.get();
    if (!clan || clan.ownerVkId !== ctx.user.vkId) {
      return ctx.oops('–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞', '–ù–∞–∑–∞–¥', '–∫–ª–∞–Ω');
    }

    const member = await ctx.params.target.clans.getMember();
    if (!member || member.clanId !== clan.id) {
      return ctx.oops(`${ctx.params.target} –Ω–µ—Ç –≤ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ.`, '–ù–∞–∑–∞–¥', '–∫–ª–∞–Ω');
    }

    member.destroy();

    ctx.params.target.send(`üí¢ ${ctx.user} –∏—Å–∫–ª—é—á–∏–ª –≤–∞—Å –∏–∑ –∫–ª–∞–Ω–∞.`);
    ctx.answer(`‚úî ${ctx.params.target} –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –∫–ª–∞–Ω–∞.`);
  }
}

class LeaveSubcommand {
  name = '–ø–æ–∫–∏–Ω—É—Ç—å';

  async handler(ctx) {
    const clan = await ctx.user.clans.get();
    if (!clan) {
      return ctx.oops('–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ', '–ù–∞–∑–∞–¥', '–∫–ª–∞–Ω');
    }

    if (clan.ownerVkId === ctx.user.vkId) {
      return ctx.oops('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å–≤–æ–π –∫–ª–∞–Ω', '–ù–∞–∑–∞–¥', '–∫–ª–∞–Ω');
    }

    const member = await ctx.user.clans.getMember();
    member.destroy();

    const clanOwner = await clan.getOwner();

    clanOwner.send(`üí¢ ${ctx.user} –ø–æ–∫–∏–Ω—É–ª –≤–∞—à –∫–ª–∞–Ω.`);
    ctx.answer('‚úî –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω.');
  }
}

class JoinRequestHandler {
  async accept(ctx, { source }) {
    const clan = await ctx.user.clans.get();
    if (!clan) {
      return ctx.oops('–£ –≤–∞—Å –Ω–µ—Ç –∫–ª–∞–Ω–∞.', '–¢–æ–ø –∫–ª–∞–Ω–æ–≤', '–∫–ª–∞–Ω —Ç–æ–ø');
    }

    if (clan.ownerVkId !== ctx.user.vkId) {
      return ctx.oops('–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞.', '–ö –∫–ª–∞–Ω—É', '–∫–ª–∞–Ω');
    }

    if (await source.clans.getMember()) {
      return ctx.oops('–û–Ω —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ.', '–ö –∫–ª–∞–Ω—É', '–∫–ª–∞–Ω');
    }

    if (await clan.getMembersCount() >= clan.slots) {
      return ctx.oops('–í –∫–ª–∞–Ω–µ –Ω–µ—Ç –º–µ—Å—Ç.', '–ö –∫–ª–∞–Ω—É', '–∫–ª–∞–Ω');
    }

    await clan.addMember(source.vkId);

    source.send(`‚úÖ ${ctx.user} –ø—Ä–∏–Ω—è–ª –≤–∞—Å –≤ –∫–ª–∞–Ω <<${clan.name}>> ‚Ññ${clan.id}.`);
    ctx.answer(`‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ ${source} –≤ –∫–ª–∞–Ω.`);
  }

  deny(ctx, { source }) {
    ctx.answer('‚≠ï –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –≤ –∫–ª–∞–Ω.');
    source.send(`‚≠ï ${ctx.user} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –∫–ª–∞–Ω.`);
  }
}

class JoinSubcommand {
  name = '–≤—Å—Ç—É–ø–∏—Ç—å';
  arguments = {
    clan: { name: '–∫–ª–∞–Ω', type: 'clan' }
  };

  init(henta) {
    const reqPlugin = henta.getPlugin('common/req');
    reqPlugin.set('clans:join', new JoinRequestHandler());
  }

  clear(henta) {
    const reqPlugin = henta.getPlugin('common/req');
    reqPlugin.unset('clans:join');
  }

  async handler(ctx) {
    if (await ctx.user.clans.getMember()) {
      return ctx.oops('–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ', '–ö –∫–ª–∞–Ω—É', '–∫–ª–∞–Ω');
    }

    if (ctx.params.clan.isClosed) {
      return ctx.answer('üîí –≠—Ç–æ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª–∞–Ω. –ü–æ–ø–∞—Å—Ç—å –≤ –Ω–µ–≥–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.');
    }

    const clanOwner = await ctx.params.clan.getOwner();
    clanOwner.req.new({
      tag: 'clans:join',
      text: `${ctx.user} —Ö–æ—á–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≤–∞—à –∫–ª–∞–Ω.`
    }, ctx.user);

    ctx.answer('‚úÖ –í—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –≤ –∫–ª–∞–Ω.');
  }
}

class InfoSubcommand {
  name = '–∏–Ω—Ñ–æ';
  arguments = {
    clan: { name: '–∫–ª–∞–Ω', type: 'clan' }
  };

  async handler(ctx) {
    const { clan } = ctx.params;

    ctx.builder()
      .lines([
        `üõ° –ö–ª–∞–Ω ¬´${clan.name}¬ª ‚Ññ${clan.id}:`,
        `üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${await clan.getOwner()};`,
        `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${await clan.getMembersCount()}/${clan.slots} —á–µ–ª.`,
        clan.isClosed ? 'üîí –ó–∞–∫—Ä—ã—Ç—ã–π –∫–ª–∞–Ω;' : 'üîì –û—Ç–∫—Ä—ã—Ç—ã–π –∫–ª–∞–Ω;'
      ])
      // .buttons([])
      .answer();
  }
}

export default class ClanCommand {
  name = '–∫–ª–∞–Ω';
  description = '–∫–ª–∞–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞';
  emoji = 'üõ°';
  subcommands = [
    new InfoSubcommand(),
    new JoinSubcommand(),
    new KickSubcommand(),
    new ModeSubcommand(),
    new CreateSubcommand(),
    new LeaveSubcommand(),
    new SlotSubcommand(),
    new MembersSubcommand()
  ];

  init(henta) {
    this.subcommands[1].init(henta);
  }

  clear(henta) {
    this.subcommands[1].clear(henta);
  }

  async handler(ctx) {
    const clan = await ctx.user.clans.get();
    if (!clan) {
      return ctx.oops('–£ –≤–∞—Å –Ω–µ—Ç –∫–ª–∞–Ω–∞.', '–¢–æ–ø –∫–ª–∞–Ω–æ–≤', '–∫–ª–∞–Ω —Ç–æ–ø');
    }

    ctx.params = { clan };
    return this.subcommands[0].handler(ctx);
  }
}
/*
  async createHandler (ctx) {
    await ctx.user.assertClan(ctx, 'free')
    ctx.user.buy(ctx, 1e7)

    const clan = await ctx.getPlugin('mybot/systems').createClan({
      name: ctx.params.name,
      ownerVkId: ctx.user.vkId
    })

    ctx.send([
      '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∫–ª–∞–Ω.',
      '‚û§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω—ë–º –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.'
    ])

    ctx.user.acceptBuy(ctx)
    await this.infoHandler(Object.assign(ctx, { params: { clan } }))
  }
*/
