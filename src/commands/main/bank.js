import { Keyboard } from 'vk-io';

function makeButtons(ctx, buttons) {
  const keyboard = Keyboard.builder();
  buttons.forEach(v => keyboard.textButton({
    label: v[0],
    payload: { command: v[1] },
    color: v[2] && 'primary'
  }));

  keyboard.inline(ctx.clientInfo.inline_keyboard === true);
  keyboard.oneTime();

  return keyboard;
}

class PullSubcommand {
  name = '–ø—Ä–æ–¥–∞—Ç—å';
  arguments = {
    count: { name: '–∫–æ–ª-–≤–æ', type: 'integer' }
  }

  async handler(ctx) {
    if (ctx.params.count < 1) {
      return ctx.answer('‚õî –ú–∏–Ω–∏–º—É–º - 1 —è—Ä–∏–∫.');
    }

    const bankPlugin = ctx.getPlugin('bot/bank');
    const account = await bankPlugin.getAccount(ctx.user.vkId);
    if (!account || account.count < ctx.params.count) {
      return ctx.answer('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è—Ä–∏–∫–æ–≤.');
    }

    account.count -= ctx.params.count;
    if (account.count <= 0) {
      // account.destroy();
      // bankPlugin.cache.set(ctx.user.vkId, 0);
    // } else {
      account.save();
    }

    const rate = await bankPlugin.getRate();
    ctx.user.money += ctx.params.count * rate;

    ctx.builder()
      .lines([
        'üíø –í—ã –ø—Ä–æ–¥–∞–ª–∏ —è—Ä–∏–∫–∏.',
        `üìü ${account.count.toLocaleString('ru')} —è—Ä.`
      ])
      .keyboard(makeButtons(ctx, [
        ['–ë–∞–Ω–∫', '–±–∞–Ω–∫', true]
      ]))
      .answer();
  }
}

class PushSubcommand {
  name = '–∫—É–ø–∏—Ç—å';
  arguments = {
    count: { name: '–∫–æ–ª-–≤–æ', type: 'integer' }
  }

  async handler(ctx) {
    if (ctx.params.count < 10) {
      return ctx.answer('‚õî –ú–∏–Ω–∏–º—É–º - 10 —è—Ä–∏–∫–æ–≤.');
    }

    const bankPlugin = ctx.getPlugin('bot/bank');
    const rate = await bankPlugin.getRate();
    if (ctx.params.count * rate > ctx.user.money) {
      return ctx.answer('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ç.');
    }

    if (ctx.params.count < 10) {
      return ctx.answer('‚õî –ú–∏–Ω–∏–º—É–º - 10 —è—Ä–∏–∫–æ–≤.');
    }

    const account = await bankPlugin.getAccount(ctx.user.vkId)
      || await bankPlugin.createAccount(ctx.user.vkId);

    account.count += ctx.params.count;
    account.save();
    ctx.user.money -= ctx.params.count * rate;

    ctx.builder()
      .lines([
        'üíø –í–∞—à —Å—á—ë—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω.',
        `üìü ${account.count.toLocaleString('ru')} —è—Ä.`
      ])
      .keyboard(makeButtons(ctx, [
        ['–ë–∞–Ω–∫', '–±–∞–Ω–∫', true]
      ]))
      .answer();
  }
}

export default class BankCommand {
  name = '–±–∞–Ω–∫';
  description = '–≤—Ç–æ—Ä–æ–π –±–∞–ª–∞–Ω—Å';
  emoji = 'üè¶';
  arguments = {
    target: { name: '—Ü–µ–ª—å', type: 'user', optional: true }
  };

  subcommands = [
    new PushSubcommand(),
    new PullSubcommand()
  ];

  generateChart(history) {
    const data = {
      type: 'line',
      data: {
        labels: history.map(() => ''),
        datasets: [
          { label: '–ö—É—Ä—Å', data: history, borderColor: 'green', fill: false }
        ]
      },
      options: {
        legend: { display: false },
        scales: { yAxes: [{ display: true, ticks: { beginAtZero: false } }] }
      }
    };

    return `https://quickchart.io/chart?c=${encodeURIComponent(JSON.stringify(data))}`;
  }

  async handler(ctx) {
    const redisPlugin = ctx.getPlugin('common/redis');

    const target = ctx.params.target || ctx.user;
    const bankPlugin = ctx.getPlugin('bot/bank');
    const [history, account, rate] = await Promise.all([
      redisPlugin.getObject('bank-history'),
      bankPlugin.getAccount(target.vkId),
      bankPlugin.getRate()
    ]);

    ctx.builder()
      .lines([
        account && target !== ctx.user && `üë§ ${target}:`,
        account && `üìü ${account.count.toLocaleString('ru')} —è—Ä.`,
        `üìà –ö—É—Ä—Å: ${rate.toLocaleString('ru')} –±–∏—Ç.`,
        !account && '\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–±–∞–Ω–∫ –∫—É–ø–∏—Ç—å <–∫–æ–ª-–≤–æ>` –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —è—Ä–∏–∫–æ–≤.',
        account && '\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–±–∞–Ω–∫ –ø—Ä–æ–¥–∞—Ç—å <–∫–æ–ª-–≤–æ>` –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —è—Ä–∏–∫–æ–≤.'
      ])
      .cachedPhoto(history.join(','), () => this.generateChart(history))
      .answer();
  }
}
