class SelectSubcommand {
  name = '–≤—ã–±—Ä–∞—Ç—å';

  async handler(ctx) {
    if (await ctx.user.pets.get()) {
      return ctx.builder()
        .line('üßß –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü.')
        .makeButtons(ctx, [['–ß—É–¥–µ—Å–Ω–æ!', '–ø–∏—Ç', true]])
        .answer();
    }

    const petsPlugin = ctx.getPlugin('systems/pets');
    const redisPlugin = ctx.getPlugin('common/redis');

    const pet = await redisPlugin.getObject(`pets:select:${ctx.user.vkId}`);
    if (!pet) {
      return ctx.builder()
        .text('üîé –î–∞–≤–∞–π—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥—ë–º –ø–∏—Ç–æ–º—Ü–∞.')
        .makeButtons(ctx, [['–ù—É –¥–∞–≤–∞–π', '–ø—Ä–∏—é—Ç', true]])
        .answer();
    }

    petsPlugin.Pet.create({
      name: pet.name,
      type: pet.type,
      ownerVkId: ctx.user.vkId,
      variety: 0,
      force: 0,
      rating: 0
    });

    ctx.builder()
      .text('‚úî –í—ã –∑–∞–≤–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞!')
      .makeButtons(ctx, [['–ß—É–¥–µ—Å–Ω–æ!', '–ø–∏—Ç', true]])
      .answer();
  }
}

export default class ShelderCommand {
  name = '–ø—Ä–∏—é—Ç';
  description = '–ø–æ–∏—Å–∫ –ø–∏—Ç–æ–º—Ü–∞';
  emoji = 'üå∑';
  subcommands = [
    new SelectSubcommand()
  ];

  async handler(ctx) {
    if (await ctx.user.pets.get()) {
      return ctx.builder()
        .line('üßß –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü.')
        .makeButtons(ctx, [['–ß—É–¥–µ—Å–Ω–æ!', '–ø–∏—Ç', true]])
        .answer();
    }

    const petsPlugin = ctx.getPlugin('systems/pets');
    const redisPlugin = ctx.getPlugin('common/redis');

    const names = await ctx.henta.util.loadSettings('pets/names.json');

    const kind = petsPlugin.kinds[Math.floor(Math.random() * petsPlugin.kinds.length)];
    const name = names[Math.floor(Math.random() * names.length)];

    const pet = {
      type: kind.slug,
      name
    };

    redisPlugin.setObject(`pets:select:${ctx.user.vkId}`, pet);

    ctx.builder()
      .text(`${kind.emoji} ${pet.name}`)
      .makeButtons(ctx, [
        ['–ï–≥–æ!', '–ø—Ä–∏—é—Ç –≤—ã–±—Ä–∞—Ç—å', true],
        ['–°–ª–µ–¥—É—é—â–∏–π', '–ø—Ä–∏—é—Ç']
      ])
      .answer();
  }
}
