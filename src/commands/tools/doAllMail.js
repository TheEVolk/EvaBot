import { Op } from 'sequelize';
// eslint-disable-next-line import/extensions
import createMessageBuilder from '../../plugins/common/bot/src/messageBuilder/creator.js';

function chunk(arr, chunkSize) {
  const R = [];
  for (let i = 0, len = arr.length; i < len; i += chunkSize) {
    R.push(arr.slice(i, i + chunkSize));
  }

  return R;
}

function getRandomId() {
  return `${Math.floor(Math.random() * 1e4)}${Date.now()}`;
}

export default class DoAllMail {
  name = '—Ä–∞–∑–æ—Å–ª–∞—Ç—å';
  right = 'doAllMail';
  arguments = {
    slug: { name: '—Ç–∏–ø', type: 'word' }
  }

  async handler(ctx) {
    const msg = ctx.getPayloadValue('allmailMsg') || ctx.replyMessage;
    if (!msg) {
      return ctx.answer('–í—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.');
    }

    const allmailPlugin = ctx.getPlugin('common/allmail');
    const category = allmailPlugin.categories.find(v => v.slug === ctx.params.slug);
    if (!category) {
      return ctx.answer('üìõ –¢–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    }

    const { AllmailSubscriber } = ctx.getPlugin('common/allmail');

    const messageBuilder = createMessageBuilder();
    messageBuilder.setContext({ vk: ctx.vk });
    messageBuilder.attach(msg.attachments.join(','));
    messageBuilder.lines([
      msg.text,
      '\nüí° –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥–æ–π `—Ä–∞—Å—Å—ã–ª–∫–∞`.'
    ]);

    const data = await AllmailSubscriber.findAll({ where: { slug: ctx.params.slug } });

    const ids = data.map(v => v.vkId);
    const userIds = ids.filter(v => v < 2e9);
    const chatIds = ids.filter(v => v > 2e9);

    const userIdsChunks = chunk(userIds, 100);

    const userMessages = userIdsChunks.map(v => ({
      user_ids: v,
      random_id: getRandomId(),
      ...messageBuilder.msg
    }));

    const chatMessages = chatIds.map(v => ({
      chat_id: v - 2e9,
      random_id: getRandomId(),
      ...messageBuilder.msg
    }));

    ctx.send('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
    const result = await ctx.vk.collect.executes('messages.send', [
      ...userMessages,
      ...chatMessages
    ]);

    const bankPlugin = ctx.getPlugin('bot/bank');
    bankPlugin.BankAccount.increment({ count: category.bonus }, {
      where: {
        vkId: {
          [Op.in]: userIds
        }
      }
    });

    bankPlugin.cache = new Map();

    ctx.answer([
      '‚úîÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.',
      `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userIds.length} —à—Ç.`,
      `üí¨ –ß–∞—Ç–æ–≤: ${chatIds.length} —à—Ç.`,
      `‚≠ï –û—à–∏–±–æ–∫: ${result.errors.length}`
    ]);
  }
}
