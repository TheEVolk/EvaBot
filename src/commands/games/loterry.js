export default class {
  constructor (henta) {
    Object.assign(this, {
      name: '–ª–æ—Ç–µ—Ä–µ—è',
      description: '–ª–æ—Ç–µ—Ä–µ—è —Å —á–∏—Å–ª–æ–º',
      emoji: 'üîü',
      arguments: {
        rate: { name: '—Å—Ç–∞–≤–∫–∞', type: 'moneys' }
      }
    })
  }

  async handler (ctx) {
    ctx.assert(ctx.user.getRoleValue('maxGame') >= ctx.params.rate, '–°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞ –¥–ª—è –≤–∞—Å.')
    const isWin = Math.random() > 0.7
    const coff = Math.random() > 0.9 ? 3 : 2

    ctx.user.money -= ctx.params.rate
    if (isWin) {
      ctx.user.money += ctx.params.rate * coff
      await ctx.user.unlockAchievementIf('firstWinOnLottery', ctx.params.rate >= 10000)
    }

    ctx.builder()
      .text(`${isWin ? `–ø–æ–±–µ–¥–∞ X${coff}` : '–ø–æ—Ä–∞–∂–µ–Ω–∏–µ.'}`, { sendName: true })
      .textButton({
        label: '–°—ã–≥—Ä–∞—Ç—å –µ—â—ë',
        color: 'positive',
        payload: {
          sbs: {
            command: '–ª–æ—Ç–µ—Ä–µ—è',
            titles: ['–ù–∞ —Å–∫–æ–ª—å–∫–æ –±–∏—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å?']
          }
        }
      })
      .answer()
  }
}
