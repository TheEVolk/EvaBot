import { Keyboard } from 'vk-io'
import { Op } from 'sequelize'

class TopSubcommand {
  name = '—Ç–æ–ø'

  async handler (ctx) {
    const { SeedsStat, getStat } = ctx.getPlugin('bot/gameSeeds');

    const myStat = await getStat(ctx.user.vkId)
    const myPos = myStat && await SeedsStat.count({ where: { count: { [Op.gte]: myStat } } })

    const stats = await SeedsStat.findAll({ order: [['count', 'DESC']], limit: 5 })

    ctx.builder()
      .text('üìä –¢–æ–ø —Å–µ–º–∫–æ—â–µ–ª–∫–∞—Ç–µ–ª–µ–π:')
      .lines([
        ...stats.map(
          (v, i) => `${i + 1}‚É£ [id${v.vkId}|${v.count.toLocaleString('ru')} —Å–µ–º.]`
        ),
        myStat && `\nüîº –í—ã ‚Ññ${myPos} –≤ —Ç–æ–ø–µ!`
      ])
      .keyboard(Keyboard.builder()
        .textButton({ label: `–°–µ–º–µ—á–∫–∏`, payload: { command: '—Å–µ–º–µ—á–∫–∏' } })
        .inline(ctx.clientInfo.inline_keyboard === true)
        .oneTime()
      )
      .answer()
  }
}

class PeckSubcommand {
  name = '—â–µ–ª–∫–∞—Ç—å'

  async handler (ctx) {
    const redisPlugin = ctx.getPlugin('common/redis');
    const { SeedsStat, peck } = ctx.getPlugin('bot/gameSeeds');
    const stat = await peck(ctx.user.vkId);

    redisPlugin.set('seeds-trash', (parseInt(await redisPlugin.get('seeds-trash')) || 0) + 1)

    ctx.user.lvl.addScore(1)
    ctx.user.achievements.unlockIf('seeds', stat === 1000);
    
    ctx.builder()
      .lines([
        `‚ûï –í—ã —â–µ–ª–∫–Ω—É–ª–∏ —Å–µ–º–µ—á–∫—É.`,
        `üåª –í—Å–µ–≥–æ: ${stat.toLocaleString('ru')} —Å–µ–º.`
      ])
      .keyboard(Keyboard.builder()
        .textButton({ label: '–©—ë–ª–∫!', color: 'positive', payload: { command: '—Å–µ–º–µ—á–∫–∏ —â–µ–ª–∫–∞—Ç—å' } })
        .oneTime()
      )
      .answer();
  }
}

class ClearSubcommand {
  name = '—É–±–∏—Ä–∞—Ç—å—Å—è'

  async handler (ctx) {
    const redisPlugin = ctx.getPlugin('common/redis');
    let trash = parseInt(await redisPlugin.get('seeds-trash')) || 0;

    const cleared = Math.min(Math.floor(Math.random() * 20), trash);

    trash -= cleared;
    ctx.user.money += cleared;

    redisPlugin.set('seeds-trash', trash)

    ctx.builder()
      .lines([
        `‚ú® –í—ã —É–±—Ä–∞–ª–∏ ${cleared} –µ–¥. –º—É—Å–æ—Ä–∞`,
        `üåª –û—Å—Ç–∞–ª–æ—Å—å: ${trash.toLocaleString('ru')} –µ–¥.`
      ])
      .keyboard(Keyboard.builder()
        .textButton({ label: '–£–±–∏—Ä–∞—Ç—å—Å—è', color: 'primary', payload: { command: '—Å–µ–º–µ—á–∫–∏ —É–±–∏—Ä–∞—Ç—å—Å—è' } })
        .oneTime()
      )
      .answer();
  }
}

export default class SeedsCommand {
  name = '—Å–µ–º–µ—á–∫–∏'
  description = '—â–µ–ª–∫–∞—Ç—å —Å–µ–º–∫–∏'
  emoji = 'üåª';
  subcommands = [
    new PeckSubcommand(),
    new TopSubcommand(),
    new ClearSubcommand()
  ]

  async welcome (ctx) {
    const { getTotal } = ctx.getPlugin('bot/gameSeeds');
    const total = await getTotal();

    ctx.builder()
      .lines([
        `–í—ã –º–æ–∂–µ—Ç–µ —â–µ–ª–∫–∞—Ç—å —Å–µ–º–µ—á–∫–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É –æ–ø—ã—Ç–∞ –∑–∞ –∫–∞–∂–¥—É—é —Å–µ–º–µ—á–∫—É. –¢–∞–∫–∂–µ –∑–¥–µ—Å—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–ø –ø–æ —Å–∞–º—ã–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å–µ–º–∫–æ—â–µ–ª–∫–∞—Ç–µ–ª—è–º.`,
        `\nüë• –í—Å–µ–≥–æ: ${total.toLocaleString('ru')} —Å–µ–º.`
      ])
      .keyboard(Keyboard.builder()
        .textButton({ label: '–©—ë–ª–∫!', color: 'positive', payload: { command: '—Å–µ–º–µ—á–∫–∏ —â–µ–ª–∫–∞—Ç—å' } })
        .textButton({ label: '–¢–æ–ø', payload: { command: '—Å–µ–º–µ—á–∫–∏ —Ç–æ–ø' } })
        .row()
        .textButton({ label: '–£–±–∏—Ä–∞—Ç—å—Å—è', payload: { command: '—Å–µ–º–µ—á–∫–∏ —É–±–∏—Ä–∞—Ç—å—Å—è' } })
        .inline(ctx.clientInfo.inline_keyboard === true)
        .oneTime()
      )
      .answer();
  }

  async handler (ctx) {
    const { getStat, getTotal } = ctx.getPlugin('bot/gameSeeds');
    const stat = await getStat(ctx.user.vkId);
    if (!stat) {
      return this.welcome(ctx);
    }

    const total = await getTotal();
    const percent = Math.floor(stat / total * 100);

    ctx.builder()
      .lines([
        `üåª –í—ã: ${stat.toLocaleString('ru')} —Å–µ–º. (${percent}%)`,
        `üë• –í—Å–µ–≥–æ: ${total.toLocaleString('ru')} —Å–µ–º.`
      ])
      .keyboard(Keyboard.builder()
        .textButton({ label: '–©—ë–ª–∫!', color: 'positive', payload: { command: '—Å–µ–º–µ—á–∫–∏ —â–µ–ª–∫–∞—Ç—å' } })
        .textButton({ label: '–¢–æ–ø', payload: { command: '—Å–µ–º–µ—á–∫–∏ —Ç–æ–ø' } })
        .row()
        .textButton({ label: '–£–±–∏—Ä–∞—Ç—å—Å—è', payload: { command: '—Å–µ–º–µ—á–∫–∏ —É–±–∏—Ä–∞—Ç—å—Å—è' } })
        .inline(ctx.clientInfo.inline_keyboard === true)
        .oneTime()
      )
      .answer();
  }
}
