class CoinflipRequestHandler {
  accept (ctx, { source, rate, sendResult }) {
    const { briefNumber } = ctx.getPlugin('systems/moneys')

    if (ctx.user.money < rate) {
      return ctx.answer(`‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ç.`)
    }

    if (source.money < rate) {
      return ctx.answer(`‚õî –£ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ç.`)
    }

    const winner = Math.random() >= 0.5 ? ctx.user : source
    const looser = winner === ctx.user ? source : ctx.user

    winner.money += rate
    looser.money -= rate
    source.save()

    sendResult([
      `üåó ${source} vs ${ctx.user}:`,
      `üí∞ ${rate.toLocaleString('ru')} –±–∏—Ç.`,
      `\n‚öú ${winner} –ø–æ–±–µ–¥–∏–ª!`
    ])

    winner.send(`‚ûï ${briefNumber(rate)} [${briefNumber(winner.money)}].`)
    looser.send(`‚ûñ ${briefNumber(rate)} [${briefNumber(looser.money)}].`)
  }

  deny (ctx, { source }) {
    ctx.answer(`‚≠ï –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–∏–Ω—Ñ–ª–∏–ø.`)
    source.send(`‚≠ï ${ctx.user} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–∏–Ω—Ñ–ª–∏–ø.`)
  }
}

export default class {
  name = '–∫—Ñ'
  description = '–∫–æ–∏–Ω—Ñ–ª–∏–ø'
  emoji = 'üåó'
  arguments = {
    target: { name: '–ø—Ä–æ—Ñ–∏–ª—å', type: 'user' },
    rate: { name: '—Å—Ç–∞–≤–∫–∞', type: 'moneys' }
  }

  init (henta) {
    const requestsPlugin = henta.getPlugin('common/requests')
    requestsPlugin.set('games:coinflip', new CoinflipRequestHandler())
  }

  async handler (ctx) {
    const rateStr = ctx.params.rate.toLocaleString('ru')
    const { tip } = ctx.params.target.req.new({
      tag: 'games:coinflip',
      text: `${ctx.user} —Ö–æ—á–µ—Ç —Å—ã–≥—Ä–∞—Ç—å —Å –≤–∞–º–∏ –≤ –ö–§ –Ω–∞ ${rateStr} –±–∏—Ç.`,
      payload: { rate: ctx.params.rate },
      peer: ctx.peerId
    }, ctx.user)

    ctx.answer([
      `üí∞ –°—Ç–∞–≤–∫–∞: ${rateStr} –±–∏—Ç.`,
      '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞...',
      tip
    ])
  }
}
