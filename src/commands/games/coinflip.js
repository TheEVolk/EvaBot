export default class {
  constructor () {
    Object.assign(this, {
      name: '–∫—Ñ',
      description: '–∫–æ–∏–Ω—Ñ–ª–∏–ø',
      emoji: 'üåó',
      arguments: {
        target: { name: '–ø—Ä–æ—Ñ–∏–ª—å', type: 'user' },
        rate: { name: '—Å—Ç–∞–≤–∫–∞', type: 'moneys' }
      }
    })
  }

  init (henta) {
    henta.getPlugin('common/requests').addTag(
      'games:coinflip',
      this.acceptGame,
      this.denyGame
    )
  }

  async denyGame (ctx, { source }) {
    source.send(`‚ùå ${ctx.user.r()} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –ö–§.`)
    ctx.answer(`‚≠ï –ó–∞—è–≤–∫–∞ –Ω–∞ –ö–§ —Å ${source.r()} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`)
  }

  async acceptGame (ctx, { source, rate, peers }) {
    ctx.user.assertBalance(ctx, rate)
    ctx.assert(
      source.money >= rate,
      '—É –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã —Å –≤–∞–º–∏.'
    )

    const winner = Math.random() >= 0.5 ? ctx.user : source
    const looser = winner === ctx.user ? source : ctx.user

    winner.money += rate
    looser.money -= rate
    source.save()

    const message = [
      `üåó ${source.r()} –∏ ${ctx.user.r()}:`,
      `üí∞ –°—Ç–∞–≤–∫–∞: ${rate.toLocaleString('ru')} –±–∏—Ç.`,
      `
‚öú ${winner.r()} –ø–æ–±–µ–¥–∏–ª!`
    ].join('\n')

    peers.forEach((peerId) => ctx.api.messages.send({ peerId, message }))
    ctx.answered = true
  }

  async handler (ctx) {
    const { tip } = ctx.params.target.createRequest({
      tag: 'games:coinflip',
      text: `${ctx.user.r()} —Ö–æ—á–µ—Ç —Å—ã–≥—Ä–∞—Ç—å —Å –≤–∞–º–∏ –≤ –ö–§ –Ω–∞ ${ctx.params.rate.toLocaleString('ru')} –±–∏—Ç.`,
      payload: { rate: ctx.params.rate },
      peer: ctx.msg.peer_id
    }, ctx.user)

    ctx.answer([
      '‚úÖ –í—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∏–≥—Ä—É –≤ –ö–§:',
      `üí∞ –°—Ç–∞–≤–∫–∞: ${ctx.params.rate.toLocaleString('ru')} –±–∏—Ç.`,
      tip
    ])
  }
}
