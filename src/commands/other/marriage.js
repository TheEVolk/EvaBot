class MarriageRequestHandler {
  async accept (ctx, { source, sendResult }) {
    ctx.user.partner = source.vkId
    await ctx.user.save()

    source.partner = ctx.user.vkId
    await source.save()

    sendResult([
      `üéá ${ctx.user} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${source}!`
    ])

    source.send([
      `üíç ${ctx.user} —Å–∫–∞–∑–∞–ª –≤–∞–º <<–¥–∞>>!`
    ])
  }

  deny (ctx, { source }) {
    ctx.answer(`‚≠ï –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –±—Ä–∞–∫.`)

    source.send(`‚≠ï ${ctx.user} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –±—Ä–∞–∫.`)
  }
}

class DivorceSubcommand {
  name = '—Ä–∞–∑–≤–æ–¥'

  async handler(ctx) {
    const oldPartner = await ctx.user.marriage.get()

    if (oldPartner) {
      oldPartner.partner = null
      await oldPartner.save()

      ctx.user.partner = null
      await ctx.user.save()

      oldPartner.send(`üíî ${ctx.user} —Ä–∞–∑–≤—ë–ª—Å—è —Å –≤–∞–º–∏.`)
    }

    ctx.answer(oldPartner ? `üíî –í—ã –±–æ–ª—å—à–µ –Ω–µ –≤ –±—Ä–∞–∫–µ —Å ${oldPartner}.` : '‚õî –í—ã –∏ —Ç–∞–∫ –Ω–µ –≤ –±—Ä–∞–∫–µ!')
  }
}

export default class MarriageCommand {
  name = '—Å–≤–∞–¥—å–±–∞'
  aliases = ['–±—Ä–∞–∫']
  description = '–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –±—Ä–∞–∫ —Å –¥–æ—Ä–æ–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º'
  emoji = '‚ù§'
  arguments = {
    target: { name: '—Ü–µ–ª—å', type: 'user', notSelf: true }
  }

  subcommands = [
    new DivorceSubcommand()
  ];

  init (henta) {
    const reqPlugin = henta.getPlugin('common/req')
    reqPlugin.set('tools:marriage', new MarriageRequestHandler())
  }

  clear (henta) {
    const reqPlugin = henta.getPlugin('common/req')
    reqPlugin.unset('tools:marriage')
  }

  async handler(ctx) {
    const oldPartner = await ctx.user.marriage.get()

    if (!oldPartner) {
      const { tip } = ctx.params.target.req.new({
        tag: 'tools:marriage',
        text: `${ctx.user} —Ö–æ—á–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å —Å –≤–∞–º–∏ –≤ –±—Ä–∞–∫.`,
        peer: ctx.peerId
      }, ctx.user)

      return ctx.answer(
        ['‚ù§ –ù–∞–¥–µ–µ–º—Å—è, –≤–∞—à–∞ –ª—é–±–æ–≤—å –≤–∑–∞–∏–º–Ω–∞ –∏ –∫—Ä–µ–ø–∫–∞.\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞...', tip]
      )
    }

    ctx.answer(
      (oldPartner && ctx.params.target) && '‚õî –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ–¥–∏—Ç–µ—Å—å.'
    )
  }
}