import { Keyboard } from 'vk-io'

export default function initUsersMethods (plugin) {
  const usersPlugin = plugin.henta.getPlugin('common/users')

  usersPlugin.group('req')
    .method('new', (self, data, source) => {
      const code = plugin.getFreeCode()
      const createdTime = Math.floor(Date.now() / 1000)
      if (source) {
        data.sourceId = source.vkId
      }

      data.peers = [data.peer || source.vkid]
      plugin.requests.add({ vkId: self.vkId, code, createdTime, ...data })

      self.sendBuilder()
        .lines([
        `üì¨ ${data.text} (${code})`
        // `\n‚¨ú –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–º +/- —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É. (${code})`
        ])
        .keyboard(Keyboard.builder()
          .textButton({
            label: '–ü—Ä–∏–Ω—è—Ç—å',
            color: 'positive',
            payload: { req: { action: 'accept', code } }
          })
          .textButton({
            label: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
            color: 'negative',
            payload: { req: { action: 'deny', code } }
          })
          .inline()
        )
        .send()

      const tip = [
        `\n‚¨ú –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É, –ø–µ—Ä–µ—Å–ª–∞–≤ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–æ—Ç–º–µ–Ω–∞". (${code})`
      ].join(' ')

      return { code, tip }
    })
    .end()
}